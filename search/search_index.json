{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem-vindo ao FinanceFlow","text":"<p>Esta \u00e9 a documenta\u00e7\u00e3o oficial do FinanceFlow, uma aplica\u00e7\u00e3o web de controle financeiro pessoal e empresarial desenvolvida em Django, com interface moderna em Tailwind CSS.</p> <p>O projeto foi constru\u00eddo com foco em usabilidade, seguran\u00e7a e an\u00e1lise de dados, oferecendo uma experi\u00eancia de usu\u00e1rio fluida e insights financeiros valiosos.</p>"},{"location":"#visao-geral-do-projeto","title":"Vis\u00e3o Geral do Projeto","text":"<ul> <li>Tecnologias: Django, Tailwind CSS, Python 3.10+, HTMX.</li> <li>Funcionalidades Principais: Gest\u00e3o de contas, receitas, despesas, transfer\u00eancias, dashboard din\u00e2mico, autentica\u00e7\u00e3o de usu\u00e1rios e relat\u00f3rios avan\u00e7ados.</li> <li>Diferencial: O painel anal\u00edtico utiliza <code>scikit-learn</code> para realizar proje\u00e7\u00f5es de saldo futuro, ajudando no planejamento financeiro.</li> </ul> <p>Navegue pela documenta\u00e7\u00e3o utilizando o menu lateral para explorar os guias de instala\u00e7\u00e3o, as funcionalidades em detalhe, a estrutura das APIs e mais.</p> <p>Para come\u00e7ar, recomendamos a leitura da se\u00e7\u00e3o de Instala\u00e7\u00e3o.</p>"},{"location":"apis/","title":"APIs e Integra\u00e7\u00e3o AJAX","text":"<p>Uma caracter\u00edstica central da arquitetura do sistema \u00e9 o uso intensivo de AJAX para criar uma interface de usu\u00e1rio din\u00e2mica e reativa, minimizando recarregamentos de p\u00e1gina. Isso \u00e9 alcan\u00e7ado atrav\u00e9s de uma combina\u00e7\u00e3o de views que respondem com JSON e JavaScript/HTMX no frontend.</p>"},{"location":"apis/#padrao-de-views-de-api","title":"Padr\u00e3o de Views de API","text":"<p>A maioria das views que interagem com AJAX segue um padr\u00e3o:</p> <ol> <li>Verifica se a requisi\u00e7\u00e3o \u00e9 do tipo AJAX checando o cabe\u00e7alho <code>X-Requested-With</code>.     <code>python     if request.headers.get('x-requested-with') == 'XMLHttpRequest':         # L\u00f3gica para AJAX</code></li> <li>Processa os dados do formul\u00e1rio (<code>request.POST</code>).</li> <li>Se o formul\u00e1rio for v\u00e1lido, executa a a\u00e7\u00e3o e retorna um <code>JsonResponse</code> com <code>success: True</code>.</li> <li>Se o formul\u00e1rio for inv\u00e1lido, retorna um <code>JsonResponse</code> com <code>success: False</code> e um dicion\u00e1rio de <code>errors</code>.</li> </ol>"},{"location":"apis/#exemplo-de-resposta-de-sucesso","title":"Exemplo de Resposta de Sucesso","text":"<p>Usado para notificar o frontend que a opera\u00e7\u00e3o foi conclu\u00edda.</p> <p><code>POST /entradas/nova/</code></p> <pre><code>{\n  \"success\": true,\n  \"message\": \"Entrada criada com sucesso!\"\n}\n</code></pre>"},{"location":"apis/#exemplo-de-resposta-de-erro-de-validacao","title":"Exemplo de Resposta de Erro de Valida\u00e7\u00e3o","text":"<p>Usado para que o frontend possa exibir os erros de valida\u00e7\u00e3o de formul\u00e1rio perto dos campos correspondentes.</p> <p><code>POST /saidas/nova/</code></p> <pre><code>{\n  \"success\": false,\n  \"errors\": {\n    \"valor\": [\"Este campo \u00e9 obrigat\u00f3rio.\"],\n    \"data_vencimento\": [\"Insira uma data v\u00e1lida.\"]\n  }\n}\n</code></pre>"},{"location":"apis/#endpoints-de-api-notaveis","title":"Endpoints de API Not\u00e1veis","text":"<p>Al\u00e9m das views de CRUD que respondem a AJAX, existem endpoints que funcionam puramente como APIs de dados:</p> <ul> <li><code>GET /api/transacao/&lt;int:pk&gt;/detalhes/</code>: Retorna o HTML de um modal com os detalhes de uma transa\u00e7\u00e3o espec\u00edfica (<code>Entrada</code> ou <code>Saida</code>).</li> <li><code>GET /api/profile/statistics/</code>: Fornece dados num\u00e9ricos e textuais sobre a atividade do usu\u00e1rio para popular um painel de estat\u00edsticas.</li> <li><code>GET /get-account-balance/&lt;int:pk&gt;/</code>: Retorna o saldo atual de uma conta, \u00fatil para atualizar valores na interface ap\u00f3s uma opera\u00e7\u00e3o.</li> <li><code>POST /saidas/&lt;int:saida_id&gt;/marcar-pago/</code>: Endpoint de a\u00e7\u00e3o que altera o status de uma despesa para \"pago\".</li> </ul>"},{"location":"arquitetura/","title":"Arquitetura do FinanceFlow","text":"<p>O FinanceFlow \u00e9 constru\u00eddo sobre uma arquitetura h\u00edbrida que combina o poder do framework Django para renderiza\u00e7\u00e3o de p\u00e1ginas no servidor com uma API RESTful robusta para servir clientes desacoplados, como o aplicativo nativo para Android.</p> <p>Essa abordagem permite oferecer uma experi\u00eancia web r\u00e1pida e interativa, ao mesmo tempo que mant\u00e9m uma l\u00f3gica de neg\u00f3cios centralizada e segura, acess\u00edvel de qualquer plataforma.</p>"},{"location":"arquitetura/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>A arquitetura pode ser dividida nos seguintes componentes principais:</p> <ol> <li>Backend (Django): O n\u00facleo do sistema, respons\u00e1vel pela l\u00f3gica de neg\u00f3cios, acesso ao banco de dados e autentica\u00e7\u00e3o.</li> <li>Aplica\u00e7\u00e3o Web (Django + HTMX): A interface web para navegadores, onde o Django renderiza o HTML e o HTMX adiciona interatividade.</li> <li>API RESTful (Django REST Framework): Exp\u00f5e os dados e funcionalidades do sistema de forma segura para clientes externos.</li> <li>Aplica\u00e7\u00e3o Mobile (Android Nativo): Um cliente nativo que consome a API RESTful.</li> <li>Banco de Dados (PostgreSQL): O sistema de persist\u00eancia de dados.</li> </ol> <pre><code>graph TD\n    subgraph \"Clientes\"\n        A[Browser]\n        B[App Android Nativo]\n    end\n\n    subgraph \"Servidor FinanceFlow\"\n        C{Django}\n        D[API RESTful&lt;br&gt;(Django REST Framework)]\n        E[Views Web&lt;br&gt;(com HTMX)]\n    end\n\n    subgraph \"Dados\"\n        F[Banco de Dados&lt;br&gt;(PostgreSQL)]\n    end\n\n    A -- Requisi\u00e7\u00f5es HTTP --&gt; E\n    E -- Renderiza HTML --&gt; A\n    B -- Requisi\u00e7\u00f5es API (JSON) --&gt; D\n    D -- Respostas API (JSON) --&gt; B\n    C -- Gerencia --&gt; D\n    C -- Gerencia --&gt; E\n    D -- Acessa --&gt; F\n    E -- Acessa --&gt; F\n</code></pre>"},{"location":"arquitetura/#componentes-em-detalhe","title":"Componentes em Detalhe","text":""},{"location":"arquitetura/#1-backend-django","title":"1. Backend (Django)","text":"<p>O Django atua como a espinha dorsal do projeto. Ele \u00e9 respons\u00e1vel por: - Modelagem de Dados: Define a estrutura do banco de dados atrav\u00e9s dos modelos em <code>core/models.py</code>. - L\u00f3gica de Neg\u00f3cios: Centraliza todas as regras de valida\u00e7\u00e3o e manipula\u00e7\u00e3o de dados. - Autentica\u00e7\u00e3o e Autoriza\u00e7\u00e3o: Gerencia o acesso de usu\u00e1rios tanto para a aplica\u00e7\u00e3o web quanto para a API.</p>"},{"location":"arquitetura/#2-aplicacao-web-django-htmx-tailwind-css","title":"2. Aplica\u00e7\u00e3o Web (Django + HTMX + Tailwind CSS)","text":"<p>Esta \u00e9 a interface acessada via navegador. A arquitetura se diferencia de um SPA (Single Page Application) tradicional:</p> <ul> <li>Renderiza\u00e7\u00e3o no Servidor: O Django \u00e9 respons\u00e1vel por renderizar as p\u00e1ginas HTML completas. Isso melhora o SEO e o tempo de carregamento inicial.</li> <li>Estiliza\u00e7\u00e3o com Tailwind CSS: A interface \u00e9 constru\u00edda com o framework de CSS utilit\u00e1rio Tailwind. Os arquivos-fonte em <code>theme/static_src/</code> s\u00e3o compilados para um \u00fanico arquivo CSS est\u00e1tico.</li> <li>Interatividade com HTMX: Para evitar recarregamentos completos da p\u00e1gina em a\u00e7\u00f5es como filtros ou submiss\u00e3o de formul\u00e1rios, usamos o HTMX. Ele permite que elementos HTML fa\u00e7am requisi\u00e7\u00f5es AJAX a URLs espec\u00edficas no Django. Em vez de retornar JSON, as views do Django respondem com fragmentos de HTML, que o HTMX insere diretamente no DOM. Isso mant\u00e9m a l\u00f3gica de renderiza\u00e7\u00e3o no servidor, simplificando o frontend.</li> </ul>"},{"location":"arquitetura/#3-api-restful-django-rest-framework","title":"3. API RESTful (Django REST Framework)","text":"<p>Para servir o aplicativo Android e potencialmente outros servi\u00e7os, o projeto exp\u00f5e uma API RESTful usando o Django REST Framework (DRF).</p> <ul> <li>Endpoints: URLs bem definidas (ex: <code>/api/transacoes/</code>, <code>/api/contas/</code>) permitem opera\u00e7\u00f5es de CRUD (Criar, Ler, Atualizar, Deletar) sobre os recursos do sistema.</li> <li>Serializa\u00e7\u00e3o: O DRF converte os modelos complexos do Django em formato JSON, que \u00e9 facilmente consumido por clientes.</li> <li>Autentica\u00e7\u00e3o JWT: A API \u00e9 protegida usando JSON Web Tokens. O cliente (app Android) envia as credenciais, recebe um access token e o utiliza no cabe\u00e7alho <code>Authorization</code> de requisi\u00e7\u00f5es subsequentes para se autenticar.</li> </ul>"},{"location":"arquitetura/#4-aplicacao-mobile-android-nativo-em-kotlin","title":"4. Aplica\u00e7\u00e3o Mobile (Android Nativo em Kotlin)","text":"<p>O projeto <code>android_app/</code> cont\u00e9m o c\u00f3digo para um cliente Android nativo.</p> <ul> <li>Cliente Desacoplado: Ele opera de forma independente do backend, comunicando-se exclusivamente atrav\u00e9s da API RESTful.</li> <li>Gerenciamento de Estado Pr\u00f3prio: O app \u00e9 respons\u00e1vel por sua pr\u00f3pria interface, gerenciamento de estado e l\u00f3gica de apresenta\u00e7\u00e3o.</li> </ul>"},{"location":"arquitetura/#organizacao-do-codigo","title":"Organiza\u00e7\u00e3o do C\u00f3digo","text":"<ul> <li><code>core/</code>: \u00c9 o cora\u00e7\u00e3o da aplica\u00e7\u00e3o Django. Cont\u00e9m os <code>models.py</code> (estrutura de dados), <code>views.py</code> (l\u00f3gica para as p\u00e1ginas web com HTMX), <code>api_views.py</code> (l\u00f3gica para os endpoints da API) e <code>serializers.py</code> (serializadores para a API).</li> <li><code>theme/</code>: Um app Django dedicado ao frontend. <code>static_src/</code> cont\u00e9m os fontes do Tailwind CSS, e <code>templates/</code> cont\u00e9m os layouts HTML base.</li> <li><code>financas/</code>: Cont\u00e9m as configura\u00e7\u00f5es globais do projeto Django, como <code>settings.py</code> e <code>urls.py</code>.</li> <li><code>android_app/</code>: Um projeto Android Studio completamente separado, que vive no mesmo reposit\u00f3rio mas n\u00e3o tem depend\u00eancia direta de c\u00f3digo com o Django.</li> </ul>"},{"location":"arquitetura/#fluxo-de-dados-para-visualizacao-de-graficos","title":"Fluxo de Dados para Visualiza\u00e7\u00e3o de Gr\u00e1ficos","text":"<p>Uma das funcionalidades centrais do dashboard \u00e9 a capacidade de visualizar dados financeiros de forma interativa. O fluxo para gerar um gr\u00e1fico (ex: despesas por categoria) \u00e9 um \u00f3timo exemplo de como os componentes da arquitetura trabalham juntos.</p> <ol> <li> <p>Intera\u00e7\u00e3o do Usu\u00e1rio (Frontend):</p> <ul> <li>O usu\u00e1rio acessa o dashboard. Na interface, ele interage com filtros (ex: seleciona um per\u00edodo de \"\u00daltimos 30 dias\" ou uma conta banc\u00e1ria espec\u00edfica).</li> <li>O c\u00f3digo JavaScript no frontend detecta a mudan\u00e7a nos filtros.</li> </ul> </li> <li> <p>Requisi\u00e7\u00e3o AJAX (Frontend -&gt; Backend):</p> <ul> <li>O JavaScript monta uma requisi\u00e7\u00e3o AJAX (usando <code>fetch</code>) para um endpoint espec\u00edfico da API, como <code>/api/dashboard/</code>.</li> <li>Os filtros selecionados pelo usu\u00e1rio s\u00e3o enviados como par\u00e2metros na URL (ex: <code>?periodo=30&amp;conta_id=1</code>).</li> </ul> </li> <li> <p>Processamento no Backend (Django API View):</p> <ul> <li>A view da API no Django (<code>api_views.py</code>) recebe a requisi\u00e7\u00e3o.</li> <li>Ela l\u00ea os par\u00e2metros da URL para entender os filtros solicitados.</li> <li>A view ent\u00e3o executa consultas ao banco de dados, utilizando o ORM do Django para buscar as <code>Transacoes</code> que correspondem aos filtros do usu\u00e1rio.</li> </ul> </li> <li> <p>Agrega\u00e7\u00e3o de Dados (Backend):</p> <ul> <li>Em vez de retornar milhares de transa\u00e7\u00f5es, a view processa e agrega esses dados.</li> <li>Por exemplo, para um gr\u00e1fico de \"despesas por categoria\", a view agrupa as transa\u00e7\u00f5es por <code>categoria</code> e soma os <code>valores</code> de cada grupo.</li> <li>O resultado \u00e9 uma estrutura de dados simples e consolidada, pronta para ser visualizada (ex: <code>{'Alimenta\u00e7\u00e3o': 500.00, 'Transporte': 150.00}</code>).</li> </ul> </li> <li> <p>Resposta JSON (Backend -&gt; Frontend):</p> <ul> <li>A view da API serializa os dados agregados em formato JSON e os retorna como resposta \u00e0 requisi\u00e7\u00e3o AJAX.</li> <li>O JSON enviado \u00e9 leve e cont\u00e9m apenas a informa\u00e7\u00e3o necess\u00e1ria para o gr\u00e1fico (ex: <code>labels: ['Alimenta\u00e7\u00e3o', 'Transporte']</code>, <code>data: [500.00, 150.00]</code>).</li> </ul> </li> <li> <p>Renderiza\u00e7\u00e3o do Gr\u00e1fico (Frontend):</p> <ul> <li>O JavaScript no frontend recebe a resposta JSON.</li> <li>Ele ent\u00e3o usa a biblioteca Chart.js para renderizar ou atualizar o gr\u00e1fico no elemento <code>&lt;canvas&gt;</code> correspondente.</li> <li>Os dados recebidos (labels e valores) s\u00e3o passados para o Chart.js, que cuida de toda a parte visual da renderiza\u00e7\u00e3o.</li> </ul> </li> </ol> <p>Este fluxo otimiza o desempenho, pois transfere apenas dados consolidados pela rede e aproveita o poder do navegador do cliente para a renderiza\u00e7\u00e3o visual, resultando em uma experi\u00eancia de usu\u00e1rio r\u00e1pida e responsiva.</p>"},{"location":"creditos/","title":"Cr\u00e9ditos","text":"<p>Esta p\u00e1gina lista os cr\u00e9ditos do projeto.</p>"},{"location":"faq/","title":"FAQ e Troubleshooting","text":""},{"location":"faq/#perguntas-frequentes-faq","title":"Perguntas Frequentes (FAQ)","text":"<p>P: Como adiciono um novo banco \u00e0 lista de op\u00e7\u00f5es?</p> <p>R: Edite o arquivo <code>core/choices.py</code> e adicione uma nova tupla \u00e0 lista <code>BANCO_CHOICES</code>. O sistema o refletir\u00e1 automaticamente nos formul\u00e1rios.</p> <p>P: Por que a proje\u00e7\u00e3o no dashboard n\u00e3o aparece?</p> <p>R: A proje\u00e7\u00e3o de saldo futuro requer um m\u00ednimo de 3 meses de dados de receitas e despesas para que o modelo de regress\u00e3o linear possa ser treinado. Continue usando o sistema e ela aparecer\u00e1 quando houver dados suficientes.</p> <p>P: Posso usar o sistema com outro banco de dados, como PostgreSQL ou MySQL?</p> <p>R: Sim. O projeto usa <code>dj_database_url</code> para configurar o banco de dados a partir de uma URL. Para usar PostgreSQL, por exemplo, instale o driver (<code>psycopg2-binary</code>) e configure a vari\u00e1vel <code>DATABASE_URL</code> no seu arquivo <code>.env</code> para <code>postgres://USER:PASSWORD@HOST:PORT/NAME</code>.</p> <p>P: Como eu rodo o projeto localmente?</p> <p>R: As instru\u00e7\u00f5es completas est\u00e3o na se\u00e7\u00e3o Como Executar o Projeto Localmente do arquivo <code>README.md</code>. Voc\u00ea precisar\u00e1 do Python, Node.js e PostgreSQL instalados.</p> <p>P: Posso usar a API para minha pr\u00f3pria aplica\u00e7\u00e3o?</p> <p>R: Sim! A API foi projetada para isso. A autentica\u00e7\u00e3o \u00e9 feita via tokens JWT. Para come\u00e7ar, consulte o Guia da API RESTful para ver exemplos de como se autenticar e interagir com os endpoints.</p> <p>P: O deploy da documenta\u00e7\u00e3o no GitHub Pages falhou com um erro de <code>permiss\u00e3o negada</code> ou <code>rejected</code>. O que fazer?</p> <p>R: Este erro geralmente acontece por dois motivos: 1) seu ambiente n\u00e3o tem as chaves SSH para se autenticar no GitHub, ou 2) a branch <code>gh-pages</code> remota est\u00e1 em um estado inconsistente. A solu\u00e7\u00e3o mais robusta \u00e9 deletar a branch remota e recri\u00e1-la. Execute os seguintes comandos:</p> <pre><code># 1. Delete a branch remota (se existir)\ngit push origin --delete gh-pages\n\n# 2. Fa\u00e7a o deploy novamente\nmkdocs gh-deploy\n</code></pre>"},{"location":"faq/#solucao-de-problemas-troubleshooting","title":"Solu\u00e7\u00e3o de Problemas (Troubleshooting)","text":"<p>Erro: <code>SECRET_KEY</code> n\u00e3o definida.</p> <ul> <li>Causa: Voc\u00ea n\u00e3o criou ou n\u00e3o preencheu o arquivo <code>.env</code>.</li> <li>Solu\u00e7\u00e3o: Copie o arquivo <code>.env.example</code> para <code>.env</code> (<code>cp .env.example .env</code>) e gere uma nova chave secreta para a vari\u00e1vel <code>SECRET_KEY</code>.</li> </ul> <p>Erro: Imagens n\u00e3o aparecem ou quebram ap\u00f3s o upload.</p> <ul> <li>Causa: A configura\u00e7\u00e3o para servir arquivos de m\u00eddia em desenvolvimento pode estar faltando.</li> <li>Solu\u00e7\u00e3o: Garanta que o <code>financas/urls.py</code> principal contenha a configura\u00e7\u00e3o para servir arquivos de m\u00eddia em modo <code>DEBUG</code>, e que as vari\u00e1veis <code>MEDIA_URL</code> e <code>MEDIA_ROOT</code> em <code>settings.py</code> estejam corretas.   <code>python   # Em financas/urls.py   if settings.DEBUG:       urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</code></li> </ul> <p>Erro: Estilos (CSS) n\u00e3o s\u00e3o aplicados.</p> <ul> <li>Causa: O processo de compila\u00e7\u00e3o do Tailwind CSS pode n\u00e3o ter sido executado ou falhou.</li> <li>Solu\u00e7\u00e3o: Rode o comando de compila\u00e7\u00e3o do Tailwind, que geralmente \u00e9 gerenciado pelo <code>django-tailwind</code>.   <code>bash   python manage.py tailwind build</code>   Para desenvolvimento, voc\u00ea pode rodar o processo em modo de observa\u00e7\u00e3o:   <code>bash   python manage.py tailwind start</code></li> </ul>"},{"location":"funcionalidades/","title":"Funcionalidades","text":""},{"location":"funcionalidades/#paineis-analiticos-dashboard","title":"Pain\u00e9is Anal\u00edticos (Dashboard)","text":"<p>A view <code>dashboard</code> (<code>/dashboard/</code>) \u00e9 o principal centro de intelig\u00eancia do sistema, oferecendo uma vis\u00e3o consolidada e anal\u00edtica da sa\u00fade financeira do usu\u00e1rio.</p> <p>Devido \u00e0 sua complexidade e ao grande volume de dados processados, esta \u00e9 uma das views mais cr\u00edticas em termos de performance.</p>"},{"location":"funcionalidades/#componentes-do-dashboard","title":"Componentes do Dashboard","text":"<p>A view agrega e processa dados para exibir:</p> <ol> <li> <p>Cards de Resumo:</p> <ul> <li>Saldo total atual.</li> <li>Total de receitas e despesas do m\u00eas.</li> <li>Varia\u00e7\u00e3o percentual de receitas/despesas em rela\u00e7\u00e3o ao m\u00eas anterior.</li> <li>Status da reserva de emerg\u00eancia.</li> </ul> </li> <li> <p>Gr\u00e1ficos Hist\u00f3ricos:</p> <ul> <li>Evolu\u00e7\u00e3o de receitas, despesas e saldo acumulado ao longo dos \u00faltimos 12 meses.</li> </ul> </li> <li> <p>Proje\u00e7\u00e3o Futura (Regress\u00e3o Linear):</p> <ul> <li>Utilizando a biblioteca <code>scikit-learn</code>, a view treina um modelo de regress\u00e3o linear simples com os dados dos \u00faltimos meses.</li> <li>Com base nesse modelo, projeta as tend\u00eancias de receitas, despesas e saldo para os pr\u00f3ximos 6 meses.</li> <li>Depend\u00eancia: <code>numpy</code>, <code>scikit-learn</code>.</li> </ul> </li> <li> <p>An\u00e1lise de Despesas:</p> <ul> <li>Gr\u00e1fico de pizza mostrando a distribui\u00e7\u00e3o de despesas por categoria no m\u00eas atual.</li> <li>Gr\u00e1fico comparativo de despesas fixas vs. vari\u00e1veis.</li> </ul> </li> <li> <p>An\u00e1lise Comportamental:</p> <ul> <li>Gr\u00e1fico de barras mostrando o total de gastos por dia da semana, ajudando a identificar padr\u00f5es de consumo.</li> </ul> </li> <li> <p>Indicadores de Sa\u00fade Financeira:</p> <ul> <li>Liquidez Corrente: Capacidade de cobrir despesas de curto prazo.</li> <li>Margem de Seguran\u00e7a: Percentual da renda que sobra ap\u00f3s as despesas.</li> <li>N\u00edvel de Endividamento: Percentual do limite de cr\u00e9dito que est\u00e1 sendo utilizado.</li> </ul> </li> </ol>"},{"location":"funcionalidades/#otimizacao-e-performance","title":"Otimiza\u00e7\u00e3o e Performance","text":"<p>A view <code>dashboard</code> executa um n\u00famero significativo de consultas ao banco de dados. Para otimizar:</p> <ul> <li>Consultas: As consultas s\u00e3o feitas usando <code>aggregate(Sum(...))</code> para que o banco de dados realize os c\u00e1lculos, o que \u00e9 mais eficiente do que trazer os objetos para o Python e som\u00e1-los.</li> <li>Serializa\u00e7\u00e3o: Todos os dados para os gr\u00e1ficos s\u00e3o coletados, processados e passados para o template como um \u00fanico objeto JSON (<code>dados_graficos_json</code>). O JavaScript no lado do cliente \u00e9 respons\u00e1vel por ler este JSON e renderizar os gr\u00e1ficos (usando uma biblioteca como Chart.js, por exemplo).</li> </ul>"},{"location":"funcionalidades/#api-de-insights","title":"API de Insights","text":"<ul> <li>Endpoint: <code>GET /api/insights/</code></li> <li>View: <code>financial_insights_api</code></li> <li>Funcionalidade: Esta API complementar fornece insights r\u00e1pidos e acion\u00e1veis em formato de texto, como \"Sua reserva de emerg\u00eancia est\u00e1 baixa\" ou \"Sua taxa de economia este m\u00eas foi de 20%\", ideal para ser exibido em um widget no painel.</li> </ul>"},{"location":"funcionalidades/#operacoes-de-saque-e-emprestimos","title":"Opera\u00e7\u00f5es de Saque e Empr\u00e9stimos","text":"<p>Este m\u00f3dulo \u00e9 destinado ao rastreamento de opera\u00e7\u00f5es de cr\u00e9dito mais complexas, como empr\u00e9stimos ou adiantamentos (saque-anivers\u00e1rio do FGTS, etc.), que envolvem parcelas e taxas.</p>"},{"location":"funcionalidades/#modelo-operacaosaque","title":"Modelo <code>OperacaoSaque</code>","text":"<p>O modelo <code>core.models.OperacaoSaque</code> armazena os detalhes dessas opera\u00e7\u00f5es:</p> <ul> <li><code>proprietario</code>: <code>ForeignKey</code> para o <code>User</code>.</li> <li><code>nome_banco</code>: A institui\u00e7\u00e3o financeira.</li> <li><code>tipo_operacao</code>: <code>CharField</code> com <code>choices</code> para definir o tipo (ex: 'Empr\u00e9stimo Pessoal', 'Saque FGTS').</li> <li><code>data_contratacao</code>: Data em que a opera\u00e7\u00e3o foi realizada.</li> <li><code>valor_saque</code>: O valor total da opera\u00e7\u00e3o.</li> <li><code>valor_financiado</code>, <code>valor_iof</code>: Campos para detalhar custos.</li> <li><code>valor_liberado_cliente</code>: O valor l\u00edquido que o cliente recebeu.</li> <li>Detalhes do Parcelamento:</li> <li><code>quantidade_parcelas</code></li> <li><code>valor_parcela</code></li> <li><code>data_inicio_parcelas</code></li> <li><code>data_termino_parcelas</code></li> </ul>"},{"location":"funcionalidades/#logica-de-negocio","title":"L\u00f3gica de Neg\u00f3cio","text":"<p>O m\u00e9todo <code>save()</code> do modelo cont\u00e9m uma l\u00f3gica para calcular automaticamente a data de t\u00e9rmino do parcelamento se a data de in\u00edcio e a quantidade de parcelas forem fornecidas, utilizando a biblioteca <code>dateutil</code>.</p> <pre><code># Em core/models.py\nfrom dateutil.relativedelta import relativedelta\n\nclass OperacaoSaque(models.Model):\n    # ...\n    def save(self, *args, **kwargs):\n        # ...\n        if self.data_inicio_parcelas and self.quantidade_parcelas:\n            self.data_termino_parcelas = self.data_inicio_parcelas + relativedelta(months=self.quantidade_parcelas)\n\n        super().save(*args, **kwargs)\n</code></pre>"},{"location":"funcionalidades/#interface-de-gerenciamento","title":"Interface de Gerenciamento","text":"<p>A p\u00e1gina <code>/operacoes-saque/</code> (<code>operacao_saque_list</code>) permite ao usu\u00e1rio visualizar e gerenciar todas as suas opera\u00e7\u00f5es de saque.</p> <ul> <li>Listagem e Filtros: As opera\u00e7\u00f5es s\u00e3o listadas e podem ser filtradas por ano, m\u00eas e tipo de opera\u00e7\u00e3o.</li> <li>Estat\u00edsticas: Cards no topo da p\u00e1gina exibem o valor total sacado, o valor m\u00e9dio por opera\u00e7\u00e3o e o total l\u00edquido liberado ao cliente.</li> <li>CRUD via AJAX: Assim como outros m\u00f3dulos do sistema, a cria\u00e7\u00e3o, edi\u00e7\u00e3o e exclus\u00e3o de opera\u00e7\u00f5es s\u00e3o feitas atrav\u00e9s de modais e requisi\u00e7\u00f5es AJAX, proporcionando uma experi\u00eancia de usu\u00e1rio \u00e1gil.</li> </ul>"},{"location":"funcionalidades/#gestao-de-lembretes-financeiros","title":"Gest\u00e3o de Lembretes Financeiros","text":"<p>O m\u00f3dulo de lembretes permite que o usu\u00e1rio cadastre datas e eventos importantes para n\u00e3o perder prazos de pagamentos ou outras obriga\u00e7\u00f5es financeiras.</p>"},{"location":"funcionalidades/#modelo-lembrete","title":"Modelo <code>Lembrete</code>","text":"<p>O modelo <code>core.models.Lembrete</code> \u00e9 simples e direto:</p> <ul> <li><code>user</code>: <code>ForeignKey</code> para o usu\u00e1rio dono do lembrete.</li> <li><code>titulo</code>: Um t\u00edtulo curto para o lembrete.</li> <li><code>descricao</code>: Um campo de texto opcional para mais detalhes.</li> <li><code>data_limite</code>: A data final para o lembrete.</li> <li><code>concluido</code>: Um <code>BooleanField</code> para marcar o lembrete como conclu\u00eddo.</li> </ul>"},{"location":"funcionalidades/#interface-e-funcionalidades","title":"Interface e Funcionalidades","text":"<p>A gest\u00e3o de lembretes \u00e9 feita na p\u00e1gina <code>/lembretes/</code> (<code>lembrete_list</code>) e \u00e9 totalmente orientada a AJAX para uma experi\u00eancia fluida.</p> <ul> <li>Listagem: Os lembretes s\u00e3o listados em ordem de <code>data_limite</code>.</li> <li>Cria\u00e7\u00e3o: Um formul\u00e1rio em um modal permite a cria\u00e7\u00e3o de novos lembretes.</li> <li>Edi\u00e7\u00e3o e Exclus\u00e3o: A\u00e7\u00f5es r\u00e1pidas dispon\u00edveis para cada lembrete na lista.</li> </ul>"},{"location":"funcionalidades/#acao-de-alternar-status","title":"A\u00e7\u00e3o de Alternar Status","text":"<p>A funcionalidade mais interativa \u00e9 a de marcar um lembrete como conclu\u00eddo diretamente na lista.</p> <ul> <li>Endpoint: <code>POST /lembretes/alternar-status/</code></li> <li> <p>View: <code>alternar_status_lembrete</code></p> </li> <li> <p>O usu\u00e1rio clica em uma checkbox ao lado do lembrete.</p> </li> <li>Uma requisi\u00e7\u00e3o <code>POST</code> via JavaScript \u00e9 enviada para a API, contendo o ID do lembrete e o novo status (<code>true</code> ou <code>false</code>).</li> <li>A view atualiza o campo <code>concluido</code> no banco de dados.</li> <li>A interface \u00e9 atualizada visualmente (ex: o texto do lembrete \u00e9 riscado) sem a necessidade de recarregar a p\u00e1gina.</li> </ul>"},{"location":"funcionalidades/#csrf_exempt","title":"<code>@csrf_exempt</code>","text":"<p>A view <code>alternar_status_lembrete</code> utiliza o decorador <code>@csrf_exempt</code>. Isso \u00e9 feito para simplificar a chamada AJAX a partir do JavaScript. </p> <p>Nota de Seguran\u00e7a: Embora simplifique o desenvolvimento, o uso de <code>@csrf_exempt</code> deve ser feito com cautela. Neste caso, o risco \u00e9 baixo, pois a a\u00e7\u00e3o (marcar um lembrete como conclu\u00eddo) \u00e9 idempotente e restrita ao usu\u00e1rio logado (<code>request.user</code>). No entanto, para a\u00e7\u00f5es mais sens\u00edveis, seria prefer\u00edvel enviar o token CSRF no cabe\u00e7alho da requisi\u00e7\u00e3o AJAX.</p>"},{"location":"funcionalidades/#cadastro-e-gerenciamento-de-contas-bancarias","title":"Cadastro e Gerenciamento de Contas Banc\u00e1rias","text":"<p>O gerenciamento de contas \u00e9 uma funcionalidade central do sistema, permitindo que o usu\u00e1rio cadastre todas as suas contas financeiras, sejam elas contas correntes, poupan\u00e7as ou cart\u00f5es.</p>"},{"location":"funcionalidades/#modelo-contabancaria","title":"Modelo <code>ContaBancaria</code>","text":"<p>O modelo <code>core.models.ContaBancaria</code> possui os seguintes campos importantes:</p> <ul> <li><code>proprietario</code>: <code>ForeignKey</code> para o <code>User</code>.</li> <li><code>nome_banco</code>: <code>CharField</code> com <code>choices</code> vindos de <code>core.choices.BANCO_CHOICES</code>.</li> <li><code>tipo</code>: <code>CharField</code> com <code>choices</code> como 'corrente', 'poupanca', 'credito', etc.</li> <li><code>saldo_atual</code>: <code>DecimalField</code> para o saldo da conta.</li> <li><code>ativa</code>: <code>BooleanField</code> para ativar ou desativar uma conta.</li> <li>Campos de Cart\u00e3o de Cr\u00e9dito: <code>limite_cartao</code>, <code>dia_fechamento_fatura</code>, <code>dia_vencimento_fatura</code>.</li> </ul>"},{"location":"funcionalidades/#operacoes-crud","title":"Opera\u00e7\u00f5es CRUD","text":"<p>O sistema oferece um CRUD (Create, Read, Update, Delete) completo para contas, com forte integra\u00e7\u00e3o AJAX.</p> <ul> <li> <p>Listagem (<code>/contas/</code>): A view <code>conta_list</code> exibe todas as contas do usu\u00e1rio, com filtros por tipo, status, titular e banco. A p\u00e1gina tamb\u00e9m apresenta estat\u00edsticas como saldo total e n\u00famero de contas ativas/inativas.</p> </li> <li> <p>Cria\u00e7\u00e3o (<code>/contas/nova/</code>): A cria\u00e7\u00e3o de contas pode ser feita atrav\u00e9s de um modal na p\u00e1gina de listagem, que envia os dados via AJAX para a view <code>conta_create</code>. Isso evita um recarregamento da p\u00e1gina.</p> </li> <li> <p>Atualiza\u00e7\u00e3o (<code>/contas/&lt;int:pk&gt;/editar/</code>): A edi\u00e7\u00e3o tamb\u00e9m \u00e9 feita via AJAX, pr\u00e9-preenchendo os dados da conta em um modal.</p> </li> <li> <p>Exclus\u00e3o (<code>/contas/&lt;int:pk&gt;/excluir/</code>): A exclus\u00e3o requer confirma\u00e7\u00e3o e tamb\u00e9m \u00e9 processada via AJAX.</p> </li> </ul>"},{"location":"funcionalidades/#validacoes","title":"Valida\u00e7\u00f5es","text":"<p>O modelo <code>ContaBancaria</code> possui valida\u00e7\u00f5es no m\u00e9todo <code>clean()</code> para garantir a integridade dos dados:</p> <ul> <li>Contas do tipo <code>corrente</code> ou <code>poupanca</code> exigem que os campos <code>agencia</code> and <code>numero_conta</code> sejam preenchidos.</li> <li>Outros tipos de conta, como cart\u00f5es, n\u00e3o devem ter o campo <code>agencia</code> preenchido.</li> </ul>"},{"location":"funcionalidades/#apis-e-endpoints-auxiliares","title":"APIs e Endpoints Auxiliares","text":"<ul> <li><code>GET /get_banco_code/</code>: Uma pequena API que retorna o c\u00f3digo de um banco com base no seu nome.</li> <li><code>GET /get-account-balance/&lt;int:pk&gt;/</code>: Retorna o saldo de uma conta espec\u00edfica, usado para atualizar dinamicamente a interface.</li> </ul>"},{"location":"funcionalidades/#fluxo-de-entradas-receitas-e-saidas-despesas","title":"Fluxo de Entradas (Receitas) e Sa\u00eddas (Despesas)","text":"<p>O registro de transa\u00e7\u00f5es \u00e9 a opera\u00e7\u00e3o mais frequente no sistema. O fluxo \u00e9 otimizado para ser r\u00e1pido e eficiente, com uso intensivo de modais e AJAX.</p>"},{"location":"funcionalidades/#entradas-receitas","title":"Entradas (Receitas)","text":"<p>O modelo <code>Entrada</code> \u00e9 mais simples e representa qualquer dinheiro que entra em uma conta.</p> <ul> <li>Campos: <code>usuario</code>, <code>conta_bancaria</code>, <code>nome</code>, <code>valor</code>, <code>data</code>, <code>forma_recebimento</code>.</li> <li>Valida\u00e7\u00e3o: O m\u00e9todo <code>clean()</code> impede o registro de entradas com data futura.</li> <li>Listagem (<code>/entradas/</code>): A p\u00e1gina <code>entrada_list</code> exibe todas as receitas, com filtros por ano, m\u00eas, conta e forma de recebimento. Cards no topo da p\u00e1gina mostram totais, saldo residual e varia\u00e7\u00e3o mensal.</li> </ul>"},{"location":"funcionalidades/#saidas-despesas","title":"Sa\u00eddas (Despesas)","text":"<p>O modelo <code>Saida</code> \u00e9 mais complexo para acomodar diferentes tipos de despesas.</p> <ul> <li>Campos Adicionais:</li> <li><code>data_vencimento</code>: Data de vencimento da despesa.</li> <li><code>categoria</code>, <code>subcategoria</code>: Para classifica\u00e7\u00e3o.</li> <li><code>forma_pagamento</code>, <code>tipo_pagamento_detalhe</code> (\u00e0 vista, parcelado).</li> <li><code>situacao</code> ('pago', 'pendente').</li> <li><code>quantidade_parcelas</code>, <code>valor_parcela</code>.</li> <li> <p><code>recorrente</code> (\u00fanica, mensal, anual).</p> </li> <li> <p>Valida\u00e7\u00f5es Cr\u00edticas (no m\u00e9todo <code>clean()</code>):</p> </li> <li>Para pagamentos parcelados, a quantidade de parcelas deve ser maior que 1.</li> <li>A soma das parcelas n\u00e3o pode ter uma diferen\u00e7a maior que R$ 0,01 em rela\u00e7\u00e3o ao valor total (para lidar com arredondamentos).</li> <li> <p>Despesas recorrentes n\u00e3o podem ser parceladas.</p> </li> <li> <p>Listagem (<code>/saidas/</code>): A p\u00e1gina <code>saida_list</code> permite filtrar despesas por per\u00edodo (m\u00eas/ano) e status. Ela tamb\u00e9m inclui estat\u00edsticas como total pago vs. pendente e varia\u00e7\u00e3o em rela\u00e7\u00e3o ao m\u00eas anterior.</p> </li> </ul>"},{"location":"funcionalidades/#acoes-rapidas","title":"A\u00e7\u00f5es R\u00e1pidas","text":"<ul> <li>Marcar como Pago: Na lista de sa\u00eddas, h\u00e1 um bot\u00e3o para marcar uma despesa como <code>paga</code> sem sair da p\u00e1gina. Esta a\u00e7\u00e3o \u00e9 tratada pela <code>MarcarComoPagoView</code> atrav\u00e9s de uma requisi\u00e7\u00e3o <code>POST</code> via AJAX.</li> <li>Endpoint: <code>POST /saidas/&lt;int:saida_id&gt;/marcar-pago/</code></li> </ul>"},{"location":"funcionalidades/#formularios-e-interacao","title":"Formul\u00e1rios e Intera\u00e7\u00e3o","text":"<p>Tanto para entradas quanto para sa\u00eddas, os formul\u00e1rios de cria\u00e7\u00e3o e edi\u00e7\u00e3o s\u00e3o renderizados em modais e submetidos via AJAX. As views (<code>entrada_create</code>, <code>saida_create</code>, etc.) s\u00e3o projetadas para responder tanto a requisi\u00e7\u00f5es normais (com recarregamento de p\u00e1gina) quanto a requisi\u00e7\u00f5es AJAX, retornando <code>JsonResponse</code> com mensagens de sucesso ou listas de erros de valida\u00e7\u00e3o.</p>"},{"location":"funcionalidades/#transferencias-internas-e-regras-de-consistencia-de-saldos","title":"Transfer\u00eancias Internas e Regras de Consist\u00eancia de Saldos","text":"<p>A funcionalidade de transfer\u00eancia permite ao usu\u00e1rio mover fundos entre suas pr\u00f3prias contas cadastradas. A principal preocupa\u00e7\u00e3o nesta opera\u00e7\u00e3o \u00e9 garantir a atomicidade e a consist\u00eancia dos saldos.</p>"},{"location":"funcionalidades/#modelo-transferencia","title":"Modelo <code>Transferencia</code>","text":"<p>O modelo <code>core.models.Transferencia</code> \u00e9 composto por:</p> <ul> <li><code>usuario</code>: O usu\u00e1rio que realiza a transfer\u00eancia.</li> <li><code>conta_origem</code>: <code>ForeignKey</code> para <code>ContaBancaria</code> de onde o dinheiro sai.</li> <li><code>conta_destino</code>: <code>ForeignKey</code> para <code>ContaBancaria</code> para onde o dinheiro vai.</li> <li><code>valor</code>: <code>DecimalField</code> com o montante da transfer\u00eancia.</li> <li><code>data</code>: A data em que a transfer\u00eancia foi realizada.</li> </ul>"},{"location":"funcionalidades/#garantia-de-atomicidade","title":"Garantia de Atomicidade","text":"<p>Uma transfer\u00eancia envolve duas opera\u00e7\u00f5es de atualiza\u00e7\u00e3o no banco de dados: subtrair o saldo da conta de origem e adicionar o saldo \u00e0 conta de destino. Se uma dessas opera\u00e7\u00f5es falhar, a outra n\u00e3o pode ser conclu\u00edda, pois isso deixaria os dados em um estado inconsistente (dinheiro \"desapareceria\" ou seria \"criado\" do nada).</p> <p>Para resolver isso, todas as views que manipulam transfer\u00eancias (<code>transferencia_create</code>, <code>transferencia_update</code>, <code>transferencia_delete</code>) s\u00e3o decoradas com <code>@transaction.atomic</code>.</p> <pre><code>from django.db import transaction\n\n@login_required\n@transaction.atomic\ndef transferencia_create(request):\n    # ... l\u00f3gica da view ...\n</code></pre> <p>Este decorador garante que todas as opera\u00e7\u00f5es de banco de dados dentro da view sejam executadas em uma \u00fanica transa\u00e7\u00e3o. Se qualquer erro ocorrer, a transa\u00e7\u00e3o inteira sofre um rollback, e nenhuma altera\u00e7\u00e3o \u00e9 salva no banco de dados.</p>"},{"location":"funcionalidades/#logica-de-atualizacao-de-saldo","title":"L\u00f3gica de Atualiza\u00e7\u00e3o de Saldo","text":"<p>A l\u00f3gica de neg\u00f3cio para atualizar os saldos reside no m\u00e9todo <code>save()</code> do modelo <code>Transferencia</code>.</p> <pre><code># Em core/models.py\nclass Transferencia(BaseModel):\n    # ... campos ...\n\n    def save(self, *args, **kwargs):\n        # A l\u00f3gica s\u00f3 \u00e9 aplicada para novas transfer\u00eancias\n        if not self.pk:\n            # Atualiza os saldos das contas\n            self.conta_origem.saldo_atual -= self.valor\n            self.conta_destino.saldo_atual += self.valor\n\n            self.conta_origem.save()\n            self.conta_destino.save()\n\n        super().save(*args, **kwargs)\n</code></pre> <ul> <li>Ao criar uma transfer\u00eancia, o saldo \u00e9 debitado da origem e creditado no destino.</li> <li>Ao excluir, a view <code>transferencia_delete</code> executa a l\u00f3gica inversa: o valor \u00e9 devolvido \u00e0 conta de origem e removido da conta de destino antes de a transfer\u00eancia ser apagada.</li> <li>A atualiza\u00e7\u00e3o \u00e9 a opera\u00e7\u00e3o mais complexa: ela primeiro reverte a transa\u00e7\u00e3o antiga e depois aplica a nova, tudo dentro de um bloco <code>atomic</code>.</li> </ul>"},{"location":"funcionalidades/#autenticacao-e-perfis-de-usuario","title":"Autentica\u00e7\u00e3o e Perfis de Usu\u00e1rio","text":"<p>O sistema possui um fluxo completo de autentica\u00e7\u00e3o e gerenciamento de perfis, utilizando o sistema de autentica\u00e7\u00e3o nativo do Django e estendendo-o com um modelo de perfil personalizado.</p>"},{"location":"funcionalidades/#fluxo-de-autenticacao","title":"Fluxo de Autentica\u00e7\u00e3o","text":"<ul> <li>Registro: Novos usu\u00e1rios podem se registrar atrav\u00e9s da p\u00e1gina <code>/register</code>. A view <code>core.views.register</code> utiliza o <code>CustomUserCreationForm</code> para criar um novo <code>User</code>.</li> <li>Login: A autentica\u00e7\u00e3o \u00e9 feita na p\u00e1gina <code>/login</code>, usando a <code>LoginView</code> nativa do Django. Ap\u00f3s o login, o usu\u00e1rio \u00e9 redirecionado para o <code>dashboard</code>.</li> <li>Logout: A rota <code>/logout</code> (<code>custom_logout</code>) encerra a sess\u00e3o do usu\u00e1rio e exibe uma mensagem de sucesso.</li> <li>Reset de Senha: O fluxo completo de recupera\u00e7\u00e3o de senha est\u00e1 implementado usando as views nativas do Django (<code>PasswordResetView</code>, etc.), com templates personalizados.</li> </ul>"},{"location":"funcionalidades/#perfil-do-usuario-profile","title":"Perfil do Usu\u00e1rio (<code>Profile</code>)","text":"<p>O modelo <code>Profile</code> (<code>core/models.py</code>) estende o modelo <code>User</code> com uma rela\u00e7\u00e3o <code>OneToOneField</code> para armazenar informa\u00e7\u00f5es adicionais.</p> <ul> <li>Campos Principais:</li> <li><code>foto_perfil</code>: <code>ImageField</code> para a foto do usu\u00e1rio. O sistema redimensiona a imagem para 300x300 pixels no upload e remove a foto antiga para economizar espa\u00e7o.</li> <li><code>theme</code>: Permite que o usu\u00e1rio escolha um tema (<code>light</code>, <code>dark</code>, <code>auto</code>).</li> <li><code>login_streak</code>, <code>total_logins</code>: Campos para gamifica\u00e7\u00e3o, rastreando a frequ\u00eancia de acesso.</li> </ul>"},{"location":"funcionalidades/#gerenciamento-de-perfil","title":"Gerenciamento de Perfil","text":"<p>A p\u00e1gina de perfil (<code>/profile/</code>) permite ao usu\u00e1rio:</p> <ul> <li>Atualizar Informa\u00e7\u00f5es: Alterar nome, sobrenome e e-mail atrav\u00e9s do <code>UserUpdateForm</code>.</li> <li>Alterar Foto: Fazer upload de uma nova foto de perfil ou remover a foto existente (<code>ProfileUpdateForm</code>).</li> <li>Mudar Senha: Alterar a senha de forma segura (<code>PasswordChangeForm</code>).</li> <li>Excluir Conta: Uma op\u00e7\u00e3o para excluir permanentemente a conta, com uma etapa de confirma\u00e7\u00e3o para seguran\u00e7a.</li> </ul>"},{"location":"funcionalidades/#apis-relacionadas","title":"APIs Relacionadas","text":"<p>Diversas a\u00e7\u00f5es no perfil s\u00e3o realizadas via AJAX para uma melhor experi\u00eancia do usu\u00e1rio:</p> <ul> <li><code>POST /api/profile/update-info/</code>: Atualiza dados b\u00e1sicos do usu\u00e1rio.</li> <li><code>POST /api/profile/update-photo/</code>: Atualiza a foto de perfil.</li> <li><code>GET /api/profile/statistics/</code>: Fornece dados para um painel de estat\u00edsticas do usu\u00e1rio (dias de acesso, etc.).</li> </ul>"},{"location":"instalacao/","title":"Instala\u00e7\u00e3o","text":""},{"location":"instalacao/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Antes de iniciar, garanta que voc\u00ea tenha os seguintes softwares instalados em seu ambiente de desenvolvimento:</p> <ul> <li>Python: Vers\u00e3o 3.11 ou superior.</li> <li>Git: Para clonar o reposit\u00f3rio.</li> <li>Ambiente Virtual: Recomenda-se o uso de <code>venv</code> (nativo do Python) para isolar as depend\u00eancias do projeto.</li> <li>Banco de Dados: O projeto \u00e9 configurado para usar SQLite por padr\u00e3o (sem necessidade de instala\u00e7\u00e3o adicional). Para produ\u00e7\u00e3o, recomenda-se PostgreSQL.</li> </ul>"},{"location":"instalacao/#guia-de-instalacao-local","title":"Guia de Instala\u00e7\u00e3o Local","text":"<p>Siga os passos abaixo para ter uma inst\u00e2ncia do projeto rodando localmente.</p> <ol> <li> <p>Clone o reposit\u00f3rio: <code>bash     git clone https://github.com/seu-usuario/financas-pessoais.git     cd financas-pessoais</code></p> </li> <li> <p>Crie e ative o ambiente virtual:     ```bash     # Para Linux/macOS     python3 -m venv venv     source venv/bin/activate</p> </li> <li> <p>Instale as depend\u00eancias do projeto: <code>bash     pip install -r requirements.txt</code></p> </li> <li> <p>Configure as vari\u00e1veis de ambiente:     Copie o arquivo de exemplo <code>.env.example</code> para um novo arquivo chamado <code>.env</code>.     <code>bash     cp .env.example .env</code>     Abra o arquivo <code>.env</code> e preencha as vari\u00e1veis necess\u00e1rias. Veja a se\u00e7\u00e3o \"Vari\u00e1veis de Ambiente\" para mais detalhes.</p> </li> <li> <p>Aplique as migra\u00e7\u00f5es do banco de dados:     Este comando criar\u00e1 as tabelas no banco de dados com base nos modelos do Django.     <code>bash     python manage.py migrate</code></p> </li> <li> <p>Crie um superusu\u00e1rio:     Voc\u00ea precisar\u00e1 de um usu\u00e1rio administrador para acessar o painel de administra\u00e7\u00e3o do Django.     <code>bash     python manage.py createsuperuser</code>     Siga as instru\u00e7\u00f5es no terminal para definir o nome de usu\u00e1rio, e-mail e senha.</p> </li> <li> <p>Inicie o servidor de desenvolvimento: <code>bash     python manage.py runserver</code></p> </li> </ol> <p>Por padr\u00e3o, a aplica\u00e7\u00e3o estar\u00e1 acess\u00edvel em <code>http://127.0.0.1:8000/</code>.</p>"},{"location":"instalacao/#para-windows","title":"Para Windows","text":"<p>python -m venv venv .\\venv\\Scripts\\activate ```</p>"},{"location":"instalacao/#configuracao-de-variaveis-de-ambiente","title":"Configura\u00e7\u00e3o de Vari\u00e1veis de Ambiente","text":"<p>O projeto utiliza um arquivo <code>.env</code> na raiz para gerenciar configura\u00e7\u00f5es sens\u00edveis e espec\u00edficas do ambiente, mantendo-as fora do controle de vers\u00e3o.</p> <p>O arquivo <code>.env</code> \u00e9 carregado pelo <code>python-decouple</code> no <code>settings.py</code>.</p>"},{"location":"instalacao/#variaveis-principais","title":"Vari\u00e1veis Principais","text":"Vari\u00e1vel Descri\u00e7\u00e3o Exemplo <code>SECRET_KEY</code> Chave secreta do Django. Nunca a exponha publicamente. <code>django-insecure-your-random-secret-key</code> <code>DEBUG</code> Define se o modo de depura\u00e7\u00e3o est\u00e1 ativo. <code>True</code> em desenvolvimento, <code>False</code> em produ\u00e7\u00e3o. <code>True</code> <code>ALLOWED_HOSTS</code> Lista de hosts/dom\u00ednios permitidos para servir a aplica\u00e7\u00e3o, separados por v\u00edrgula. <code>127.0.0.1,localhost,meusite.com</code> <code>DATABASE_URL</code> URL de conex\u00e3o com o banco de dados. <code>sqlite:///db.sqlite3</code> ou <code>postgres://user:pass@host/db</code> <code>EMAIL_BACKEND</code> Backend de e-mail do Django. Use <code>django.core.mail.backends.console.EmailBackend</code> para testes em console. <code>django.core.mail.backends.smtp.EmailBackend</code> <code>EMAIL_HOST</code> Host do servidor de e-mail. <code>smtp.gmail.com</code> <code>EMAIL_PORT</code> Porta do servidor de e-mail. <code>587</code> <code>EMAIL_USE_TLS</code> Se o servidor de e-mail usa TLS. <code>True</code> <code>EMAIL_HOST_USER</code> Usu\u00e1rio para autentica\u00e7\u00e3o no servidor de e-mail. <code>seu-email@gmail.com</code> <code>EMAIL_HOST_PASSWORD</code> Senha para autentica\u00e7\u00e3o no servidor de e-mail. <code>sua-senha-de-app</code>"},{"location":"tecnologias/","title":"Tecnologias Utilizadas","text":"<p>O FinanceFlow \u00e9 constru\u00eddo com um conjunto de tecnologias modernas e robustas, escolhidas para oferecer desempenho, seguran\u00e7a e uma \u00f3tima experi\u00eancia de desenvolvimento.</p> <p>Abaixo est\u00e1 uma tabela detalhando as principais tecnologias usadas em cada parte do sistema.</p> Categoria Tecnologia Backend Python 3.10+, Django 5, Django REST Framework, PostgreSQL, Redis, Gunicorn Frontend Django Templates, Tailwind CSS, HTMX, Chart.js Mobile Kotlin (Nativo Android) Testes Pytest, Pytest-Django, Coverage, Factory Boy, Faker DevOps Docker, GitHub Actions (CI/CD), Whitenoise Qualidade Black, Flake8, isort Documenta\u00e7\u00e3o MkDocs, Material for MkDocs"},{"location":"tecnologias/#detalhes-sobre-as-escolhas","title":"Detalhes sobre as Escolhas","text":"<ul> <li> <p>Django: Escolhido por sua robustez, seguran\u00e7a e ecossistema maduro (\"baterias inclusas\"). Ele serve como a espinha dorsal de todo o sistema.</p> </li> <li> <p>Django REST Framework (DRF): A escolha padr\u00e3o da ind\u00fastria para construir APIs RESTful com Django. Oferece serializa\u00e7\u00e3o, autentica\u00e7\u00e3o e um conjunto completo de ferramentas para o desenvolvimento de APIs.</p> </li> <li> <p>PostgreSQL: Um banco de dados relacional de c\u00f3digo aberto poderoso e confi\u00e1vel, ideal para aplica\u00e7\u00f5es que exigem consist\u00eancia e integridade de dados.</p> </li> <li> <p>HTMX: Em vez de um framework JavaScript pesado como React ou Vue, optamos pelo HTMX para a interface web. Ele permite criar interfaces din\u00e2micas e modernas com menos complexidade, mantendo a l\u00f3gica de renderiza\u00e7\u00e3o no servidor, o que se alinha bem com a filosofia do Django.</p> </li> <li> <p>Tailwind CSS: Um framework de CSS \"utility-first\" que nos permite construir designs complexos e responsivos rapidamente, sem sair do HTML.</p> </li> <li> <p>Kotlin (Android): A linguagem oficial para o desenvolvimento Android moderno. Permite criar um aplicativo nativo r\u00e1pido, seguro e com uma \u00f3tima experi\u00eancia de usu\u00e1rio.</p> </li> <li> <p>Pytest: O framework de testes preferido na comunidade Python por sua simplicidade, flexibilidade e fixtures poderosas.</p> </li> <li> <p>Docker: Utilizado para criar ambientes de desenvolvimento e produ\u00e7\u00e3o consistentes e isolados, facilitando o deploy e a colabora\u00e7\u00e3o.</p> </li> </ul>"},{"location":"uso/","title":"Guia de Uso do FinanceFlow","text":"<p>Este guia descreve como utilizar as principais funcionalidades da aplica\u00e7\u00e3o web do FinanceFlow.</p>"},{"location":"uso/#1-acesso-ao-sistema","title":"1. Acesso ao Sistema","text":"<ul> <li>Registro: Se voc\u00ea \u00e9 um novo usu\u00e1rio, acesse a p\u00e1gina de registro, preencha seu nome, e-mail e senha para criar uma conta.</li> <li>Login: Ap\u00f3s o registro, utilize seu nome de usu\u00e1rio e senha para acessar o sistema.</li> </ul>"},{"location":"uso/#2-navegando-pelo-dashboard","title":"2. Navegando pelo Dashboard","text":"<p>O Dashboard \u00e9 a sua central de controle financeiro. Nele, voc\u00ea encontrar\u00e1:</p> <ul> <li>Cards de Resumo: Exibem o saldo total, total de receitas e total de despesas para o per\u00edodo selecionado.</li> <li>Gr\u00e1ficos Interativos: Visualiza\u00e7\u00f5es din\u00e2micas sobre suas finan\u00e7as, como despesas por categoria, fluxo de caixa mensal, etc.</li> <li>Filtros: No canto superior, voc\u00ea pode filtrar os dados exibidos no dashboard por per\u00edodo (\u00faltimos 30 dias, 6 meses, etc.) ou por conta banc\u00e1ria.</li> </ul>"},{"location":"uso/#3-gerenciando-contas","title":"3. Gerenciando Contas","text":"<p>Voc\u00ea pode registrar todas as suas contas financeiras para ter uma vis\u00e3o consolidada.</p> <ul> <li>Para adicionar uma nova conta:</li> <li>No menu principal, navegue at\u00e9 a se\u00e7\u00e3o de \"Contas\".</li> <li>Clique no bot\u00e3o para adicionar uma nova conta.</li> <li>Preencha os dados: nome do banco, tipo de conta (corrente, poupan\u00e7a, cart\u00e3o de cr\u00e9dito), ag\u00eancia, n\u00famero da conta e o saldo inicial.</li> <li>Salve para adicionar a conta \u00e0 sua lista.</li> </ul>"},{"location":"uso/#4-registrando-transacoes","title":"4. Registrando Transa\u00e7\u00f5es","text":"<p>Manter um registro preciso de suas receitas e despesas \u00e9 a chave para o controle financeiro.</p>"},{"location":"uso/#registrando-uma-despesa-saida","title":"Registrando uma Despesa (Sa\u00edda)","text":"<ol> <li>No menu, v\u00e1 para \"Sa\u00eddas\" ou utilize um atalho no dashboard.</li> <li>Preencha o formul\u00e1rio:<ul> <li>Descri\u00e7\u00e3o: Nome da despesa (ex: \"Almo\u00e7o\", \"Conta de Luz\").</li> <li>Valor: O custo total da despesa.</li> <li>Conta Banc\u00e1ria: De qual conta o dinheiro saiu.</li> <li>Categoria: Classifique a despesa (ex: \"Alimenta\u00e7\u00e3o\", \"Moradia\").</li> <li>Forma de Pagamento: Dinheiro, cart\u00e3o de d\u00e9bito, cr\u00e9dito, etc.</li> <li>Data de Vencimento e Lan\u00e7amento: Quando a conta vence e quando foi paga.</li> <li>Situa\u00e7\u00e3o: Se est\u00e1 \"Pendente\" ou \"Paga\".</li> </ul> </li> <li>Voc\u00ea tamb\u00e9m pode configurar despesas parceladas ou recorrentes.</li> </ol>"},{"location":"uso/#registrando-uma-receita-entrada","title":"Registrando uma Receita (Entrada)","text":"<ol> <li>No menu, v\u00e1 para \"Entradas\".</li> <li>Preencha o formul\u00e1rio com a descri\u00e7\u00e3o, valor, a conta que recebeu o dinheiro e a data.</li> </ol>"},{"location":"uso/#5-realizando-transferencias","title":"5. Realizando Transfer\u00eancias","text":"<p>Para mover dinheiro entre suas contas cadastradas:</p> <ol> <li>Acesse a se\u00e7\u00e3o de \"Transfer\u00eancias\" no menu.</li> <li>Clique para adicionar uma nova transfer\u00eancia.</li> <li>Selecione a Conta de Origem e a Conta de Destino.</li> <li>Informe o valor a ser transferido e a data.</li> <li>Ao salvar, os saldos das duas contas ser\u00e3o atualizados automaticamente.</li> </ol>"},{"location":"uso/#6-exportando-relatorios","title":"6. Exportando Relat\u00f3rios","text":"<p>Para an\u00e1lises mais aprofundadas ou para guardar um registro, voc\u00ea pode exportar seus dados:</p> <ol> <li>No Dashboard, utilize os filtros para selecionar o per\u00edodo e as contas desejadas.</li> <li>Clique no bot\u00e3o \"Exportar Relat\u00f3rio\".</li> <li>O sistema ir\u00e1 gerar um arquivo (ex: PDF ou Excel) com um resumo detalhado das suas finan\u00e7as para o per\u00edodo selecionado.</li> </ol>"},{"location":"versionamento/","title":"\ud83d\udccb Guia de Versionamento e Conventional Commits","text":"<p>Este documento detalha o padr\u00e3o de commits utilizado no projeto FinanceFlow, que alimenta nosso sistema de versionamento e changelog autom\u00e1ticos.</p>"},{"location":"versionamento/#catalogo-completo-de-tipos-de-commit","title":"CAT\u00c1LOGO COMPLETO DE TIPOS DE COMMIT","text":""},{"location":"versionamento/#1-feat-nova-funcionalidade","title":"1. <code>feat</code>: Nova Funcionalidade","text":"<ul> <li>Quando usar: Adicionar novas features ao sistema.</li> <li>Impacto na vers\u00e3o: \u2b06\ufe0f MINOR (1.0.0 \u2192 1.1.0)</li> </ul> <p>\ud83d\udcdd Exemplos Pr\u00e1ticos:</p> <ul> <li>Para Dashboard: <code>bash   git commit -m \"feat(dashboard): adiciona gr\u00e1fico de evolu\u00e7\u00e3o patrimonial\"   git commit -m \"feat(dashboard): implementa cards de m\u00e9tricas r\u00e1pidas\"</code></li> <li>Para Transfer\u00eancias: <code>bash   git commit -m \"feat(transferencias): implementa agendamento de transfer\u00eancias\"   git commit -m \"feat(transferencias): adiciona confirma\u00e7\u00e3o por email para valores altos\"</code></li> <li>Para Relat\u00f3rios: <code>bash   git commit -m \"feat(relatorios): adiciona exporta\u00e7\u00e3o em PDF\"   git commit -m \"feat(relatorios): implementa relat\u00f3rio comparativo mensal\"</code></li> <li>Para Sistema de Categorias: <code>bash   git commit -m \"feat(categorias): permite cria\u00e7\u00e3o de categorias personalizadas\"   git commit -m \"feat(categorias): implementa heran\u00e7a de subcategorias\"</code></li> </ul>"},{"location":"versionamento/#2-fix-correcao-de-bug","title":"2. <code>fix</code>: Corre\u00e7\u00e3o de Bug","text":"<ul> <li>Quando usar: Corrigir comportamentos inesperados.</li> <li>Impacto na vers\u00e3o: \u2b06\ufe0f PATCH (1.0.0 \u2192 1.0.1)</li> </ul> <p>\ud83d\udc1b Exemplos de Bugs Comuns:</p> <ul> <li>C\u00e1lculos Financeiros: <code>bash   git commit -m \"fix: corrige c\u00e1lculo de saldo residual no extrato\"   git commit -m \"fix(calculos): corrige f\u00f3rmula de juros compostos\"</code></li> <li>Problemas de Interface: <code>bash   git commit -m \"fix(ui): corrige sobreposi\u00e7\u00e3o de modais no mobile\"   git commit -m \"fix(ui): resolve alinhamento de tabelas responsivas\"</code></li> <li>Problemas de Dados: <code>bash   git commit -m \"fix: corrige duplica\u00e7\u00e3o de transa\u00e7\u00f5es na importa\u00e7\u00e3o\"   git commit -m \"fix: corrige timezone em datas do extrato\"</code></li> <li>Valida\u00e7\u00f5es: <code>bash   git commit -m \"fix(validacao): corrige valida\u00e7\u00e3o de CPF/CNPJ\"   git commit -m \"fix(validacao): corrige m\u00e1scara de campos monet\u00e1rios\"</code></li> </ul>"},{"location":"versionamento/#3-docs-documentacao","title":"3. <code>docs</code>: Documenta\u00e7\u00e3o","text":"<ul> <li>Quando usar: Atualizar ou adicionar documenta\u00e7\u00e3o.</li> <li>Impacto na vers\u00e3o: \ud83d\udd04 NENHUM</li> </ul> <p>\ud83d\udcda Exemplos:</p> <ul> <li>Documenta\u00e7\u00e3o T\u00e9cnica: <code>bash   git commit -m \"docs: atualiza README com instru\u00e7\u00f5es de deploy\"   git commit -m \"docs: cria documenta\u00e7\u00e3o da API REST\"</code></li> <li>Coment\u00e1rios de C\u00f3digo: <code>bash   git commit -m \"docs: adiciona docstrings nos models Django\"   git commit -m \"docs: comenta fun\u00e7\u00f5es complexas de c\u00e1lculo\"</code></li> </ul>"},{"location":"versionamento/#4-style-formatacao","title":"4. <code>style</code>: Formata\u00e7\u00e3o","text":"<ul> <li>Quando usar: Ajustes de formata\u00e7\u00e3o que n\u00e3o alteram l\u00f3gica.</li> <li>Impacto na vers\u00e3o: \ud83d\udd04 NENHUM</li> </ul> <p>\ud83c\udfa8 Exemplos:</p> <pre><code>git commit -m \"style: aplica formata\u00e7\u00e3o black no c\u00f3digo Python\"\ngit commit -m \"style: corrige indenta\u00e7\u00e3o nos templates HTML\"\ngit commit -m \"style: ajusta espa\u00e7amento entre componentes\"\n</code></pre>"},{"location":"versionamento/#5-refactor-refatoracao","title":"5. <code>refactor</code>: Refatora\u00e7\u00e3o","text":"<ul> <li>Quando usar: Melhorar c\u00f3digo sem alterar funcionalidade.</li> <li>Impacto na vers\u00e3o: \ud83d\udd04 NENHUM</li> </ul> <p>\ud83d\udd27 Exemplos:</p> <pre><code>git commit -m \"refactor: extrai l\u00f3gica de c\u00e1lculo para service layer\"\ngit commit -m \"refactor: remove c\u00f3digo duplicado em views similares\"\ngit commit -m \"refactor: implementa repository pattern para queries\"\n</code></pre>"},{"location":"versionamento/#6-perf-performance","title":"6. <code>perf</code>: Performance","text":"<ul> <li>Quando usar: Otimiza\u00e7\u00f5es de velocidade/mem\u00f3ria.</li> <li>Impacto na vers\u00e3o: \ud83d\udd04 NENHUM</li> </ul> <p>\u26a1 Exemplos:</p> <pre><code>git commit -m \"perf: adiciona \u00edndices para consultas frequentes\"\ngit commit -m \"perf: otimiza queries do dashboard com select_related\"\ngit commit -m \"perf: implementa cache em m\u00e9tricas do dashboard\"\n</code></pre>"},{"location":"versionamento/#7-test-testes","title":"7. <code>test</code>: Testes","text":"<ul> <li>Quando usar: Adicionar ou modificar testes.</li> <li>Impacto na vers\u00e3o: \ud83d\udd04 NENHUM</li> </ul> <p>\u2705 Exemplos:</p> <pre><code>git commit -m \"test: adiciona testes unit\u00e1rios para c\u00e1lculos financeiros\"\ngit commit -m \"test: cria testes de integra\u00e7\u00e3o para transfer\u00eancias\"\ngit commit -m \"test: refatora fixtures para serem mais realistas\"\n</code></pre>"},{"location":"versionamento/#8-chore-tarefas-de-manutencao","title":"8. <code>chore</code>: Tarefas de Manuten\u00e7\u00e3o","text":"<ul> <li>Quando usar: Atualiza\u00e7\u00f5es de configura\u00e7\u00e3o, depend\u00eancias, etc.</li> <li>Impacto na vers\u00e3o: \ud83d\udd04 NENHUM</li> </ul> <p>\ud83d\udd29 Exemplos:</p> <pre><code>git commit -m \"chore: atualiza Django para vers\u00e3o 4.2.8\"\ngit commit -m \"chore: atualiza configura\u00e7\u00f5es do Docker\"\ngit commit -m \"chore: remove depend\u00eancias n\u00e3o utilizadas\"\n</code></pre>"},{"location":"versionamento/#commits-especiais","title":"\ud83d\udea8 Commits Especiais","text":""},{"location":"versionamento/#9-breaking-change-mudancas-que-quebram-compatibilidade","title":"9. <code>BREAKING CHANGE</code>: Mudan\u00e7as que Quebram Compatibilidade","text":"<ul> <li>Quando usar: Altera\u00e7\u00f5es que exigem a\u00e7\u00e3o do usu\u00e1rio/desenvolvedor.</li> <li>Impacto na vers\u00e3o: \u2b06\ufe0f MAJOR (1.0.0 \u2192 2.0.0)</li> </ul> <p>\ud83d\udca5 Exemplos:</p> <pre><code>git commit -m \"feat: altera estrutura do modelo de categorias\n\nBREAKING CHANGE: Remove campo 'tipo_antigo' do modelo Categoria, use 'novo_tipo'\"\n</code></pre> <pre><code>git commit -m \"refactor: migra para novo schema de transa\u00e7\u00f5es\n\nBREAKING CHANGE: Modifica estrutura da tabela 'transacoes', requer migra\u00e7\u00e3o manual\"\n</code></pre>"},{"location":"versionamento/#fluxos-de-trabalho-praticos","title":"\ud83d\udd04 Fluxos de Trabalho Pr\u00e1ticos","text":""},{"location":"versionamento/#cenario-1-nova-funcionalidade-completa","title":"Cen\u00e1rio 1: Nova Funcionalidade Completa","text":"<p>Branch: <code>feat/novo-dashboard</code></p> <pre><code># 1. Desenvolvimento inicial\ngit commit -m \"feat(dashboard): adiciona estrutura b\u00e1sica do componente\"\n# 2. Integra\u00e7\u00e3o com backend\ngit commit -m \"feat(dashboard): conecta com API de m\u00e9tricas\"\n# 3. Estiliza\u00e7\u00e3o\ngit commit -m \"style(dashboard): aplica design responsivo\"\n# 4. Testes\ngit commit -m \"test(dashboard): adiciona testes de renderiza\u00e7\u00e3o\"\n# 5. Documenta\u00e7\u00e3o\ngit commit -m \"docs(dashboard): cria documenta\u00e7\u00e3o do componente\"\n</code></pre>"},{"location":"versionamento/#cenario-2-correcao-de-bug-complexo","title":"Cen\u00e1rio 2: Corre\u00e7\u00e3o de Bug Complexo","text":"<p>Branch: <code>fix/calculos-financeiros</code></p> <pre><code># 1. Identificar problema\ngit commit -m \"fix: corrige c\u00e1lculo de juros em parcelamentos\"\n# 2. Refatorar para prevenir futuros erros\ngit commit -m \"refactor: extrai l\u00f3gica de c\u00e1lculo para classe dedicada\"\n# 3. Adicionar testes espec\u00edficos\ngit commit -m \"test: adiciona casos de borda para c\u00e1lculos\"\n</code></pre>"},{"location":"versionamento/#escopos-recomendados-para-financeflow","title":"\ud83c\udfa8 Escopos Recomendados para FinanceFlow","text":"Escopo Descri\u00e7\u00e3o Exemplos <code>dashboard</code> Painel principal <code>feat(dashboard):</code>, <code>fix(dashboard):</code> <code>transferencias</code> Sistema de transfer\u00eancias <code>feat(transferencias):</code>, <code>fix(transferencias):</code> <code>entradas</code> Sistema de receitas <code>feat(entradas):</code>, <code>fix(entradas):</code> <code>saidas</code> Sistema de despesas <code>feat(saidas):</code>, <code>fix(saidas):</code> <code>categorias</code> Gest\u00e3o de categorias <code>feat(categorias):</code>, <code>fix(categorias):</code> <code>relatorios</code> Sistema de relat\u00f3rios <code>feat(relatorios):</code>, <code>fix(relatorios):</code> <code>auth</code> Autentica\u00e7\u00e3o e usu\u00e1rios <code>feat(auth):</code>, <code>fix(auth):</code> <code>ui</code> Interface do usu\u00e1rio <code>style(ui):</code>, <code>fix(ui):</code> <code>api</code> API REST <code>feat(api):</code>, <code>fix(api):</code>"},{"location":"versionamento/#checklist-antes-do-commit","title":"\u26a0\ufe0f Checklist Antes do Commit","text":"<ul> <li>[ ] Mensagem segue padr\u00e3o <code>conventional commits</code>.</li> <li>[ ] Tipo correto para o tipo de mudan\u00e7a.</li> <li>[ ] Escopo aplic\u00e1vel quando relevante.</li> <li>[ ] Descri\u00e7\u00e3o clara e objetiva.</li> <li>[ ] Corpo explicativo para mudan\u00e7as complexas (opcional).</li> <li>[ ] Rodap\u00e9 <code>BREAKING CHANGE:</code> quando necess\u00e1rio.</li> </ul>"},{"location":"versionamento/#comandos-uteis","title":"Comandos \u00dateis:","text":"<pre><code># Verificar status antes do commit\ngit status\n\n# Ver diferen\u00e7as\ngit diff\n\n# Adicionar arquivos espec\u00edficos\ngit add caminho/do/arquivo.py\n\n# Commit com mensagem\ngit commit -m \"tipo(escopo): descri\u00e7\u00e3o clara\"\n\n# Corrigir \u00faltimo commit (antes de fazer push)\ngit commit --amend -m \"nova mensagem correta\"\n</code></pre>"},{"location":"visao_geral/","title":"Vis\u00e3o Geral do Projeto","text":"<p>FinanceFlow \u00e9 uma aplica\u00e7\u00e3o web de controle financeiro pessoal e empresarial desenvolvida em Django, com interface moderna em Tailwind CSS.</p> <ul> <li>Gerenciamento de contas, receitas e despesas</li> <li>Dashboard din\u00e2mico de relat\u00f3rios financeiros</li> <li>Autentica\u00e7\u00e3o e registro de usu\u00e1rios</li> <li>Visual moderno responsivo (light/dark mode)</li> <li>Focado em seguran\u00e7a e usabilidade</li> </ul>"},{"location":"visao_geral/#instalacao-rapida","title":"Instala\u00e7\u00e3o R\u00e1pida","text":"<pre><code>git clone https://github.com/seuusuario/financeflow.git\ncd financeflow\npip install -r requirements.txt\npython manage.py migrate\npython manage.py runserver\n</code></pre>"},{"location":"visao_geral/#tecnologias","title":"Tecnologias","text":"<ul> <li>Django</li> <li>Tailwind CSS</li> <li>Python 3.10+</li> </ul>"},{"location":"visao_geral/#contribuindo","title":"Contribuindo","text":"<ul> <li>Fork o reposit\u00f3rio</li> <li>Fa\u00e7a sua branch com as altera\u00e7\u00f5es</li> <li>Submeta um Pull Request</li> </ul>"},{"location":"visao_geral/#licenca","title":"Licen\u00e7a","text":"<p>MIT License</p>"},{"location":"visao_geral/#creditos","title":"Cr\u00e9ditos","text":"<p>Desenvolvido por Nome do Autor.</p>"}]}